{"remainingRequest":"C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\src\\views\\User\\children\\List.vue?vue&type=style&index=0&id=77a5eb78&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\src\\views\\User\\children\\List.vue","mtime":1616488829988},{"path":"C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Desktop\\yuepai_v2\\vuetravel\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi9kZWVwLyAuc2MtY2hhdC13aW5kb3d7CiAgei1pbmRleDogOTk5Owp9Cg=="},{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0PA;AACA;AACA","file":"List.vue","sourceRoot":"src/views/User/children","sourcesContent":["<template>\n  <div>\n     <beautiful-chat\n      :participants=\"participants\"\n      :titleImageUrl=\"titleImageUrl\"\n      :onMessageWasSent=\"onMessageWasSent\"\n      :messageList=\"messageList\"\n      :newMessagesCount=\"newMessagesCount\"\n      :isOpen=\"isChatOpen\"\n      :close=\"closeChat\"\n      :icons=\"icons\"\n      :open=\"openChat\"\n      :showEmoji=\"true\"\n      :showFile=\"true\"\n      :showEdition=\"true\"\n      :showDeletion=\"true\"\n      :showTypingIndicator=\"showTypingIndicator\"\n      :showLauncher=\"true\"\n      :showCloseButton=\"true\"\n      :colors=\"colors\"\n      :alwaysScrollToBottom=\"alwaysScrollToBottom\"\n      :messageStyling=\"messageStyling\"\n      @onType=\"handleOnType\"\n      @edit=\"editMessage\" />\n    <el-table :data=\"alldata\" border style=\"width: 100%\">\n      <el-table-column prop=\"othername\" label=\"联系人\"></el-table-column>\n      <el-table-column fixed=\"right\" label=\"操作\" width=\"200\">\n        <template slot-scope=\"scope\">\n          <el-button @click=\"openChat(scope.row)\" type=\"primary\" size=\"small\"\n            >打开聊天</el-button\n          >\n        </template>\n      </el-table-column>\n    </el-table>\n    \n  </div>\n</template>\n<script>\nimport CloseIcon from 'vue-beautiful-chat/src/assets/close-icon.png'\nimport OpenIcon from 'vue-beautiful-chat/src/assets/logo-no-bg.svg'\nimport FileIcon from 'vue-beautiful-chat/src/assets/file.svg'\nimport CloseIconSvg from 'vue-beautiful-chat/src/assets/close.svg'\nexport default {\n  data() {\n    return {\n      orderAll: [],\n      tableData: [],\n      alldata: [],\n       ssarticles: [],\n      keyWord: \"\",\n      icons:{\n        open:{\n          img: OpenIcon,\n          name: 'default',\n        },\n        close:{\n          img: CloseIcon,\n          name: 'default',\n        },\n        file:{\n          img: FileIcon,\n          name: 'default',\n        },\n        closeSvg:{\n          img: CloseIconSvg,\n          name: 'default',\n        },\n      },\n      participants: [\n        {\n          id: 'user1',\n          name: 'Matteo',\n          imageUrl: 'https://avatars3.githubusercontent.com/u/1915989?s=230&v=4'\n        },\n        {\n          id: 'user2',\n          name: 'Support',\n          imageUrl: 'https://avatars3.githubusercontent.com/u/37018832?s=200&v=4'\n        }\n      ], // the list of all the participant of the conversation. `name` is the user name, `id` is used to establish the author of a message, `imageUrl` is supposed to be the user avatar.\n      titleImageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png',\n      messageList: [\n          { type: 'text', author: `me`, data: { text: `Say yes!` } },\n          { type: 'text', author: `me`, data: { text: `Say yes!` } },\n          { type: 'text', author: `me`, data: { text: `Say yes!` } },\n          { type: 'text', author: `user1`, data: { text: `No.` } }\n      ], // the list of the messages to show, can be paginated and adjusted dynamically\n      newMessagesCount: 0,\n      isChatOpen: false, // to determine whether the chat window should be open or closed\n      showTypingIndicator: '', // when set to a value matching the participant.id it shows the typing indicator for the specific user\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      }, // specifies the color scheme for the component\n      alwaysScrollToBottom: false, // when set to true always scrolls the chat to the bottom when new events are in (new message, user starts typing...)\n      messageStyling: true,\n      sheyingid: 0,\n      userobj:{},\n      timer: {},\n      tempobj:{}\n    };\n  },\n  methods: {\n    getcontetn(obj){\n      this.$axios\n      .post(\"/api/getUserByid\", {\n          id:this.sheyingid\n        })\n      .then((res) => {\n        this.userobj = res.data[0];\n      })\n      .catch((err) => {\n        console.log(\"错误信息\" + err);\n      });\n    this.$axios\n      .post(\"/api/getzuopingbyuserid\", {\n          wish:this.sheyingid\n        })\n      .then((res) => {\n        this.ssarticles = res.data;\n      })\n      .catch((err) => {\n        console.log(\"错误信息\" + err);\n      });\n    },\n    godetail(obj, index) {\n      console.log(type,id,\"---\")\n      var { type, id } = obj\n      var strategy = { type, id };\n      var info = JSON.stringify(strategy);\n      sessionStorage.setItem(\"info\", info);\n      this.$router.push(\"/index/fvstrategy\");\n    },\n     sendMessage (text) {\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        this.onMessageWasSent({ author: 'support', type: 'text', data: { text } })\n      }\n    },\n    onMessageWasSent (message) {\n      // called when the user sends a message\n      this.messageList = [ ...this.messageList, message ]\n      let mycontent =  \"\"\n      if(message.type == \"emoji\"){\n        mycontent = message.data.emoji\n        return;\n      }else{\n        mycontent = message.data.text\n      }\n       let tuser =JSON.parse(localStorage.getItem(\"tuser\")) \n      this.$axios\n      .post(\"/api/addchatsinfo\", {\n          getterid:this.tempobj.otherid,\n          sendid: tuser.id,\n          content: mycontent\n        })\n      .then((res) => {\n      })\n      .catch((err) => {\n        console.log(\"错误信息\" + err);\n      });\n    },\n    openChat (obj) {\n      this.tempobj = obj\n      // called when the user clicks on the fab button to open the chat\n       let tuser =JSON.parse(localStorage.getItem(\"tuser\")) \n      this.$axios\n      .post(\"/api/getchatsinfo\", {\n          getterid:obj.otherid,\n          sendid: tuser.id\n        })\n      .then((res) => {\n        console.log(res)\n\n        this.messageList = []\n        res.data.forEach(element => {\n          if(element.sendid == tuser.id){\n            this.messageList.push({ type: 'text', author: `me`, data: { text: `${element.content}`} })\n          }else{\n            this.messageList.push({ type: 'text', author: `user1`, data: { text: `${element.content}`} })\n          }\n        }); \n      })\n      .catch((err) => {\n        console.log(\"错误信息\" + err);\n      });\n      this.isChatOpen = true\n      this.newMessagesCount = 0\n    },\n    closeChat () {\n      // called when the user clicks on the botton to close the chat\n      this.isChatOpen = false\n    },\n    handleScrollToTop () {\n      // called when the user scrolls message list to top\n      // leverage pagination for loading another page of messages\n    },\n    handleOnType () {\n      console.log('Emit typing event')\n    },\n    editMessage(message){\n      const m = this.messageList.find(m=>m.id === message.id);\n      m.isEdited = true;\n      m.data.text = message.data.text;\n    },\n    handleClick(obj) {\n      console.log(obj);\n      let type = 1;\n      let id = obj.goodsid;\n      var strategy = { type, id };\n      var info = JSON.stringify(strategy);\n      sessionStorage.setItem(\"info\", info);\n      this.$router.push(\"/index/fvstrategy\");\n    },\n    getOrder() {\n      let userinfo = JSON.parse(localStorage.getItem(\"tuser\"));\n      this.$axios\n        .post(\"/api/getmychatinfo\", { sendid: userinfo.id })\n        .then((res) => {\n          console.log(\"res1=2222==\", res);\n          this.alldata = res.data;\n        });\n    },\n  },\n  created() {\n    this.getOrder();\n  },\n};\n</script>\n<style scoped>\n/deep/ .sc-chat-window{\n  z-index: 999;\n}\n</style>"]}]}